import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.cluster import KMeans

def load_employee_health_data():
    data = pd.DataFrame({
        'employee_id': range(1, 11),
        'heart_rate': [72, 85, 90, 60, 77, 110, 65, 105, 58, 92],
        'bmi': [22.0, 27.5, 31.0, 19.0, 24.0, 35.0, 21.0, 33.0, 18.5, 30.0],
        'stress_level': [3, 5, 6, 2, 4, 9, 2, 8, 1, 7],
        'sleep_hours': [7, 6, 5, 8, 7, 4, 9, 5, 8, 5]
    })
    return data

def detect_anomalies(data):
    features = data[['heart_rate', 'bmi', 'stress_level', 'sleep_hours']]
    detector = IsolationForest(contamination=0.2, random_state=42)
    data['anomaly'] = detector.fit_predict(features)
    return data

def cluster_risk_groups(data):
    features = data[['heart_rate', 'bmi', 'stress_level', 'sleep_hours']]
    kmeans = KMeans(n_clusters=3, random_state=42)
    data['risk_cluster'] = kmeans.fit_predict(features)
    return data

def recommend_interventions(row):
    if row['anomaly'] == -1 or row['risk_cluster'] == 2:
        return "Immediate wellness check + consult doctor"
    elif row['risk_cluster'] == 1:
        return "Encourage stress management & sleep tracking"
    else:
        return "Maintain healthy routine"

def generate_report(data):
    data['intervention'] = data.apply(recommend_interventions, axis=1)
    print("\nğŸ“‹ Wellness Report:\n")
    print(data[['employee_id', 'risk_cluster', 'anomaly', 'intervention']])

if __name__ == "__main__":
    health_data = load_employee_health_data()
    health_data = detect_anomalies(health_data)
    health_data = cluster_risk_groups(health_data)
    generate_report(health_data)
